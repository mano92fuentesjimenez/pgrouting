  BEGIN;
  BEGIN
  SET client_min_messages TO NOTICE;
  SET
  DROP TABLE IF EXISTS lineal_groups;
  NOTICE:  table "lineal_groups" does not exist, skipping
  DROP TABLE
  CREATE TABLE lineal_groups(
    layer_name TEXT,
    group_id INT
 
 
 
  );
  CREATE TABLE
  DROP TABLE IF EXISTS point_groups;
  NOTICE:  table "point_groups" does not exist, skipping
  DROP TABLE
  CREATE TABLE point_groups(
 
 
    point_layer_name TEXT,
    lineal_layer_name TEXT
  );
  CREATE TABLE
  DROP TABLE IF EXISTS layers_info;
  NOTICE:  table "layers_info" does not exist, skipping
  DROP TABLE
  CREATE TABLE layers_info(
    layer_name TEXT,
    layer TEXT,
    conn_policy INTEGER ,
 
 
 
 
 
 
 
 
 
    z INTEGER
 
 
 
  );
  CREATE TABLE
  DROP TABLE IF EXISTS lineal_layer;
  NOTICE:  table "lineal_layer" does not exist, skipping
  DROP TABLE
  CREATE TABLE lineal_layer (
    id INTEGER ,
    the_geom GEOMETRY,
    z_start FLOAT,
    z_end FLOAT
  );
  CREATE TABLE
  DROP TABLE IF EXISTS point_layer;
  NOTICE:  table "point_layer" does not exist, skipping
  DROP TABLE
  CREATE TABLE point_layer (
    id INTEGER ,
    the_geom GEOMETRY,
    z FLOAT
  );
  CREATE TABLE
  CREATE OR REPLACE FUNCTION pgr_wrap_create_multimodal_graph (p_lineal_groups     TEXT, p_puntual_groups     TEXT, p_layers    TEXT,
                                                            p_graph_lines_table TEXT, p_graph_lines_schema TEXT, p_tolerance FLOAT,
                                                            OUT ip_out_d BIGINT , OUT p_out_layname TEXT, OUT p_out_error TEXT)
    RETURNS SETOF RECORD AS
  $$
  DECLARE
    v_lineal_groups JSONB DEFAULT '{}'::JSONB;
    v_puntual_groups JSONB DEFAULT '{}'::JSONB;
    v_layers JSONB DEFAULT '{}'::JSONB;
    v_group INT;
    v_layer_name TEXT;
    v_point_name TEXT;
    v_sql TEXT;
    v_pconn INT;
    v_z INT;
  BEGIN
    FOR v_layer_name, v_group IN EXECUTE p_lineal_groups LOOP
      IF v_lineal_groups->v_group IS NULL THEN
        v_lineal_groups = pgr_polyfill_jsonb_set(v_lineal_groups,('{'||v_group||'}')::TEXT[],'[]'::jsonb);
      END IF;
 
      v_lineal_groups = pgr_polyfill_jsonb_insert(v_lineal_groups,('{'||v_group||',0}')::TEXT[],('"'||v_layer_name||'"')::JSONB);
    END LOOP;
 
    FOR v_point_name, v_layer_name IN EXECUTE p_puntual_groups LOOP
      IF v_puntual_groups->v_point_name IS NULL THEN
        v_puntual_groups = pgr_polyfill_jsonb_set(v_puntual_groups,('{'||v_point_name ||'}'):: TEXT[],'[]'::JSONB);
      END IF;
      v_puntual_groups = pgr_polyfill_jsonb_insert(v_puntual_groups,('{'||v_point_name ||',0}')::TEXT[],('"'||v_layer_name||'"')::JSONB);
    END LOOP;
 
    FOR v_layer_name, v_sql, v_pconn, v_z IN EXECUTE p_layers LOOP
      v_layers = pgr_polyfill_jsonb_set(v_layers,('{'||v_layer_name||'}')::TEXT[],('{'
        || '"sql"   :"'|| v_sql   || '"' ||
           ',"pconn":"'|| v_pconn || '"' ||
           ',"zconn":"'|| v_z     || '"' ||
           '}')::JSONB);
    END LOOP;
 
    RETURN QUERY SELECT * FROM pgr_create_multimodal_graph(v_lineal_groups, v_puntual_groups, v_layers, p_graph_lines_table, p_graph_lines_schema, p_tolerance);
  END;
 
  $$ LANGUAGE plpgsql;
  CREATE FUNCTION
  DROP TABLE IF EXISTS test_table_l1;
  NOTICE:  table "test_table_l1" does not exist, skipping
  DROP TABLE
  CREATE TABLE test_table_l1(
    id INTEGER  PRIMARY KEY,
    the_geom GEOMETRY('linestringz',4326),
    z_start FLOAT DEFAULT 0,
    z_end FLOAT DEFAULT 0
  );
  CREATE TABLE
  INSERT INTO test_table_l1 (the_geom, id) VALUES
   ('SRID=4326;linestring(5 0 0,10 10 0, 13 10 0, 15 10 0)',1),
   ('SRID=4326;linestring(0 0 0, 10 10 0)',2),
   ('SRID=4326;linestring(10 10 0, 10 0 0)',3),
   ('SRID=4326;linestring(8 0 0, 10 10 0)',4),
   ('SRID=4326;linestring(8 0 0, 8 10 0, 10 10 0)', 5),
   ('SRID=4326;linestring(7 12 0, 13 10 0, 14 8 0)', 6);
  INSERT 0 6
  INSERT INTO test_table_l1 (the_geom, id) VALUES
   ('SRID=4326;linestring(15 14 50, 15 10 50, 15 8 50)', 7),
   ('SRID=4326;linestring(15 16 35, 15 14 50)', 8),
   ('SRID=4326;linestring(13 16 35, 15 14 50, 13 14 50)', 9);
  INSERT 0 3
  DROP TABLE IF EXISTS test_table_l2;
  NOTICE:  table "test_table_l2" does not exist, skipping
  DROP TABLE
  CREATE TABLE test_table_l2(
    id INTEGER  PRIMARY KEY,
    the_geom GEOMETRY('linestringz',4326),
    z_start FLOAT DEFAULT 0,
    z_end FLOAT DEFAULT 0
  );
  CREATE TABLE
  INSERT INTO test_table_l2 (the_geom, id) VALUES
   ('SRID=4326;linestring(13 18 35, 13 16 35, 7 12 0)', 1),
   ('SRID=4326;linestring(15 18 0, 15 16 35, 17 18 0)', 2);
  INSERT 0 2
  DROP TABLE IF EXISTS test_table_p1;
  NOTICE:  table "test_table_p1" does not exist, skipping
  DROP TABLE
  CREATE TABLE test_table_p1(
    id INTEGER  PRIMARY KEY,
    the_geom GEOMETRY('pointz',4326),
    z FLOAT DEFAULT 0
  );
  CREATE TABLE
  INSERT INTO test_table_p1 (the_geom, id) VALUES
   ('SRID=4326;point(10 10 0)',1),
   ('SRID=4326;point(10 0 0)',2),
   ('SRID=4326;point(8 10 0)',3),
   ('SRID=4326;point(8 0 0)',4),
   ('SRID=4326;point(5 0 0)',5),
   ('SRID=4326;point(0 0 0)',6),
   ('SRID=4326;point(7 12 0)',7);
  INSERT 0 7
  INSERT INTO test_table_p1 (the_geom, id) VALUES
   ('SRID=4326;point(15 10 0)',8),
   ('SRID=4326;point(13 14 50)',9),
   ('SRID=4326;point(15 16 35)',10),
   ('SRID=4326;point(15 8 50)',11);
  INSERT 0 4
  INSERT INTO test_table_p1 (the_geom, id) VALUES
   ('SRID=4326;point(14 8 0)',12),
   ('SRID=4326;point(13 18 35)',13),
   ('SRID=4326;point(15 18 0)',14);
  INSERT 0 3
  INSERT INTO lineal_groups VALUES('linealLayer-1',1),('linealLayer-2',2);
  INSERT 0 2
  INSERT INTO point_groups VALUES('pointLayer-1','linealLayer-1'),('pointLayer-1','linealLayer-2');
  INSERT 0 2
  INSERT INTO layers_info VALUES('linealLayer-1','SELECT id, the_geom, z_start, z_end FROM test_table_l1',1,0),
                                ('linealLayer-2','SELECT id, the_geom, z_start, z_end FROM test_table_l2',1,0),
                                ('pointLayer-1','SELECT id, the_geom, z FROM test_table_p1',1,0);
  INSERT 0 3
  SELECT * FROM  pgr_wrap_create_multimodal_graph(
    'SELECT * FROM lineal_groups',
    'SELECT * FROM point_groups',
    'SELECT * FROM layers_info',
    'graph_lines',
    'public',
    0.000001
  );
  NOTICE:  table "pgr_create_top_graph_ptos" does not exist, skipping
  NOTICE:  table "graph_lines_pt" does not exist, skipping
  NOTICE:  table "graph_lines" does not exist, skipping
   ip_out_d | p_out_layname |                                               p_out_error
  ----------+---------------+---------------------------------------------------------------------------------------------------------
          1 | pointLayer-1  | The point from point layer:pointLayer-1 doesnt intersect any other point in graph in group: 1, skipping
          2 | pointLayer-1  | The point from point layer:pointLayer-1 doesnt intersect any other point in graph in group: 1, skipping
          3 | pointLayer-1  | The point from point layer:pointLayer-1 doesnt intersect any other point in graph in group: 1, skipping
          4 | pointLayer-1  | The point from point layer:pointLayer-1 doesnt intersect any other point in graph in group: 1, skipping
          5 | pointLayer-1  | The point from point layer:pointLayer-1 doesnt intersect any other point in graph in group: 1, skipping
          6 | pointLayer-1  | The point from point layer:pointLayer-1 doesnt intersect any other point in graph in group: 1, skipping
          8 | pointLayer-1  | The point from point layer:pointLayer-1 doesnt intersect any other point in graph in group: 1, skipping
          9 | pointLayer-1  | The point from point layer:pointLayer-1 doesnt intersect any other point in graph in group: 1, skipping
         11 | pointLayer-1  | The point from point layer:pointLayer-1 doesnt intersect any other point in graph in group: 1, skipping
         12 | pointLayer-1  | The point from point layer:pointLayer-1 doesnt intersect any other point in graph in group: 1, skipping
         13 | pointLayer-1  | The point from point layer:pointLayer-1 doesnt intersect any other point in graph in group: 0, skipping
         14 | pointLayer-1  | The point from point layer:pointLayer-1 doesnt intersect any other point in graph in group: 0, skipping
  (12 rows)
 
  SELECT * FROM pgr_dijkstra(
     'SELECT id, source, target, 0 as cost, 0 as reverse_cost FROM graph_l' ||
     'ines',
     (SELECT id FROM graph_lines_pt WHERE id_geom =6 ),
     (SELECT id FROM graph_lines_pt WHERE id_geom =4 )
  );
   seq | path_seq | node | edge | cost | agg_cost
  -----+----------+------+------+------+----------
     1 |        1 |    3 |    8 |    0 |        0
     2 |        2 |    4 |   10 |    0 |        0
     3 |        3 |    6 |   -1 |    0 |        0
  (3 rows)
 
  SELECT * FROM pgr_dijkstra(
     'SELECT id, source, target, 0 as cost, 0 as reverse_cost FROM graph_lines',
     (SELECT id FROM graph_lines_pt WHERE id_geom =6 ),
     (SELECT id FROM graph_lines_pt WHERE id_geom =2 )
  );
   seq | path_seq | node | edge | cost | agg_cost
  -----+----------+------+------+------+----------
     1 |        1 |    3 |    8 |    0 |        0
     2 |        2 |    4 |    9 |    0 |        0
     3 |        3 |    5 |   -1 |    0 |        0
  (3 rows)
 
  SELECT * FROM pgr_dijkstra(
     'SELECT id, source, target, 0 as cost, 0 as reverse_cost FROM graph_lines',
     (SELECT id FROM graph_lines_pt WHERE id_geom =6 ),
     (SELECT id FROM graph_lines_pt WHERE id_geom =5 )
   );
   seq | path_seq | node | edge | cost | agg_cost
  -----+----------+------+------+------+----------
     1 |        1 |    3 |    8 |    0 |        0
     2 |        2 |    4 |    4 |    0 |        0
     3 |        3 |    1 |   -1 |    0 |        0
  (3 rows)
 
  SELECT * FROM graph_lines_pt WHERE id_geom = 3;
   id |   layname    | id_geom |                                geom                                | group_id
  ----+--------------+---------+--------------------------------------------------------------------+----------
   19 | pointLayer-1 |       3 | 01010000A0E6100000000000000000204000000000000024400000000000000000 |        0
  (1 row)
 
  SELECT * FROM pgr_dijkstra(
     'SELECT id, source, target, 0 as cost, 0 as reverse_cost FROM graph_lines',
     (SELECT id FROM graph_lines_pt WHERE id_geom =2 ),
     (SELECT id FROM graph_lines_pt WHERE id_geom =3 )
   );
   seq | path_seq | node | edge | cost | agg_cost
  -----+----------+------+------+------+----------
     1 |        1 |    5 |    9 |    0 |        0
     2 |        2 |    4 |   13 |    0 |        0
     3 |        3 |   19 |   -1 |    0 |        0
  (3 rows)
 
  SELECT * FROM pgr_dijkstra(
     'SELECT id, source, target, 0 as cost, 0 as reverse_cost FROM graph_lines',
     (SELECT id FROM graph_lines_pt WHERE id_geom =7 and group_id = 0),
     (SELECT id FROM graph_lines_pt WHERE id_geom =5 and group_id = 0)
   );
   seq | path_seq | node | edge | cost | agg_cost
  -----+----------+------+------+------+----------
     1 |        1 |    7 |   15 |    0 |        0
     2 |        2 |    8 |    6 |    0 |        0
     3 |        3 |    4 |    4 |    0 |        0
     4 |        4 |    1 |   -1 |    0 |        0
  (4 rows)
 
  SELECT * FROM pgr_dijkstra(
     'SELECT id, source, target, 0 as cost, 0 as reverse_cost FROM graph_lines',
     (SELECT id FROM graph_lines_pt WHERE id_geom =7 and group_id = 0),
     (SELECT id FROM graph_lines_pt WHERE id_geom =6 and group_id = 0 )
   );
   seq | path_seq | node | edge | cost | agg_cost
  -----+----------+------+------+------+----------
     1 |        1 |    7 |   15 |    0 |        0
     2 |        2 |    8 |    6 |    0 |        0
     3 |        3 |    4 |    8 |    0 |        0
     4 |        4 |    3 |   -1 |    0 |        0
  (4 rows)
 
  SELECT * FROM pgr_dijkstra(
     'SELECT id, source, target, 0 as cost, 0 as reverse_cost FROM graph_lines',
     (SELECT id FROM graph_lines_pt WHERE id_geom =11 and group_id = 0),
     (SELECT id FROM graph_lines_pt WHERE id_geom =1 and group_id = 0 )
  );
   seq | path_seq | node | edge | cost | agg_cost
  -----+----------+------+------+------+----------
  (0 rows)
 
  SELECT * FROM pgr_dijkstra(
     'SELECT id, source, target, 0 as cost, 0 as reverse_cost FROM graph_lines',
     (SELECT id FROM graph_lines_pt WHERE id_geom =11 and group_id = 0),
     (SELECT id FROM graph_lines_pt WHERE id_geom =9 and group_id = 0 )
   );
   seq | path_seq | node | edge | cost | agg_cost
  -----+----------+------+------+------+----------
     1 |        1 |   11 |   17 |    0 |        0
     2 |        2 |   10 |   21 |    0 |        0
     3 |        3 |   14 |   -1 |    0 |        0
  (3 rows)
 
  SELECT * FROM pgr_dijkstra(
     'SELECT id, source, target, 0 as cost, 0 as reverse_cost FROM graph_lines',
     (SELECT id FROM graph_lines_pt WHERE id_geom =10 and group_id = 0),
     (SELECT id FROM graph_lines_pt WHERE id_geom =9 and group_id = 0 )
   );
   seq | path_seq | node | edge | cost | agg_cost
  -----+----------+------+------+------+----------
     1 |        1 |   12 |   18 |    0 |        0
     2 |        2 |   10 |   21 |    0 |        0
     3 |        3 |   14 |   -1 |    0 |        0
  (3 rows)
 
  SELECT * FROM pgr_dijkstra(
     'SELECT id, source, target, 0 as cost, 0 as reverse_cost FROM graph_lines',
     (SELECT id FROM graph_lines_pt WHERE id_geom =13 and group_id = 1),
     (SELECT id FROM graph_lines_pt WHERE id_geom =12 and group_id = 0 )
   );
   seq | path_seq | node | edge | cost | agg_cost
  -----+----------+------+------+------+----------
     1 |        1 |   15 |   22 |    0 |        0
     2 |        2 |   16 |    1 |    0 |        0
     3 |        3 |    7 |   15 |    0 |        0
     4 |        4 |    8 |   16 |    0 |        0
     5 |        5 |    9 |   -1 |    0 |        0
  (5 rows)
 
  SELECT * FROM pgr_dijkstra(
     'SELECT id, source, target, 0 as cost, 0 as reverse_cost FROM graph_lines',
     (SELECT id FROM graph_lines_pt WHERE id_geom =13 and group_id = 1),
     (SELECT id FROM graph_lines_pt WHERE id_geom =9 and group_id = 0 )
   );
   seq | path_seq | node | edge | cost | agg_cost
  -----+----------+------+------+------+----------
  (0 rows)
 
  SELECT * FROM pgr_dijkstra(
     'SELECT id, source, target, 0 as cost, 0 as reverse_cost FROM graph_lines',
     (SELECT id FROM graph_lines_pt WHERE id_geom =14 and group_id = 1 ),
     (SELECT id FROM graph_lines_pt WHERE id_geom =9  and group_id = 0)
  );
   seq | path_seq | node | edge | cost | agg_cost
  -----+----------+------+------+------+----------
     1 |        1 |   17 |   24 |    0 |        0
     2 |        2 |   20 |    2 |    0 |        0
     3 |        3 |   12 |   18 |    0 |        0
     4 |        4 |   10 |   21 |    0 |        0
     5 |        5 |   14 |   -1 |    0 |        0
  (5 rows)
 
  ROLLBACK;
  ROLLBACK
